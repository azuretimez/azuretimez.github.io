(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{705:function(t,a,e){"use strict";e.r(a);var s=e(6),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#vue基础用法"}},[t._v("vue基础用法")]),e("ul",[e("li",[e("a",{attrs:{href:"#理论"}},[t._v("理论")])]),e("li",[e("a",{attrs:{href:"#写法"}},[t._v("写法")])]),e("li",[e("a",{attrs:{href:"#版本差异"}},[t._v("版本差异")])])])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"vue基础用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue基础用法"}},[t._v("#")]),t._v(" vue基础用法")]),t._v(" "),e("h3",{attrs:{id:"理论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理论"}},[t._v("#")]),t._v(" 理论")]),t._v(" "),e("h4",{attrs:{id:"面试题1-简单聊聊对于mvvm的了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题1-简单聊聊对于mvvm的了解"}},[t._v("#")]),t._v(" 面试题1：简单聊聊对于MVVM的了解")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("发展史以及旁支\na. 语义化模板\nb. MVC - model view controller\nc. MVVM - Model-View-ViewModel\ni. 数据绑定在viewModel层并自动将数据渲染到页面中\nii. 视图变化时，会通知viewModel层更新数据")])])])]),t._v(" "),e("h3",{attrs:{id:"写法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写法"}},[t._v("#")]),t._v(" 写法")]),t._v(" "),e("h4",{attrs:{id:"vue是如何利用mvvm进行项目开发的呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue是如何利用mvvm进行项目开发的呢"}},[t._v("#")]),t._v(" vue是如何利用mvvm进行项目开发的呢")]),t._v(" "),e("p",[t._v("数据的操作\na. 利用的模板结合变量——花括号，构筑了数据和视图的双向绑定 - 拓展能力（正则、函数）\nb. 数据处理和加工")]),t._v(" "),e("h4",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("h5",{attrs:{id:"面试题2-vue生命周期的对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题2-vue生命周期的对比"}},[t._v("#")]),t._v(" 面试题2：vue生命周期的对比？")]),t._v(" "),e("p",[t._v("beforeCreate => created\n=> beforeMount => mounted\n=> beforeUpdate => updated\n=> beforeDestroy => destroyed")]),t._v(" "),e("p",[t._v("bC: new Vue() - 实例挂载功能\nC: data, props, method, computed - 数据操作、不涉及vdom和dom")]),t._v(" "),e("p",[t._v("++++++++++++++++++++++++++ => mergeOptions")]),t._v(" "),e("p",[t._v("bM: vDom生成了 - 数据操作，但不可涉及dom\nm: Dom生成了 - 任何操作")]),t._v(" "),e("p",[t._v("++++++++++++++++++++++++++ => 执行重绘有关")]),t._v(" "),e("ul",[e("li",[t._v("面试 - 触发update、操作update => nextTick")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. ul 5个li")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$nextTick")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 把ul最后一个li变成红色")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 最后一个li干掉 => 重绘 => 4个li")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("bU: vDom更新了，dom未更新 - 可以做更新数据的读取和使用\nu: dom已经更新了 - 任何操作 => 谨慎操作数据")]),t._v(" "),e("p",[t._v("++++++++++++++++++++++++++ => 实例销毁")]),t._v(" "),e("p",[t._v("bD: 实例vm尚未被销毁 - 清空eventBus, reset store, clear计时器\nd: 当前实例真正被销毁 - 收尾")]),t._v(" "),e("h4",{attrs:{id:"定向监听"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定向监听"}},[t._v("#")]),t._v(" 定向监听")]),t._v(" "),e("h5",{attrs:{id:"面试点3-computed-和-watch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试点3-computed-和-watch"}},[t._v("#")]),t._v(" 面试点3：computed 和 watch")]),t._v(" "),e("p",[t._v("相同点：")]),t._v(" "),e("ol",[e("li",[t._v("基于vue的依赖收集机制 —— 搜索监听对象")]),t._v(" "),e("li",[t._v("都是被依赖的变化触发，进行改变进而进行处理计算")])]),t._v(" "),e("p",[t._v("不同点：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("入和出\ncomputed: 多入单出 - 多个值变化，组成一个值变化\nwatch: 单入多出 - 单个值的变化，进而影响一系列的状态变更")])]),t._v(" "),e("li",[e("p",[t._v("性能\ncomputed: 会自动diff依赖，若依赖没有变化，会高聪缓存中读取当前计算值\nwatch: 无论监听值变化与否，都会执行回调")])]),t._v(" "),e("li",[e("p",[t._v("写法上\ncomputed: 比如有return\nwatch: 不一定")])]),t._v(" "),e("li",[e("p",[t._v("时机上\ncomputed: 从首次生成赋值，就开始计算\nwatch: 首次不会运行的，immediate: true")])])]),t._v(" "),e("h4",{attrs:{id:"条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件"}},[t._v("#")]),t._v(" 条件")]),t._v(" "),e("h5",{attrs:{id:"v-if-v-show-v-else-v-else-if"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-if-v-show-v-else-v-else-if"}},[t._v("#")]),t._v(" v-if & v-show & v-else & v-else-if")]),t._v(" "),e("p",[t._v("面试：v-if 和 v-show\n相同点：")]),t._v(" "),e("ol",[e("li",[t._v("都能控制节点展示与否")])]),t._v(" "),e("p",[t._v("不同点：\nv-if 无实际dom  => 性能优化\nv-show 有dom只是不展示")]),t._v(" "),e("h4",{attrs:{id:"循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),e("p",[t._v("面试: v-for 和 v-if 优先级\n"),t._v("\nvue2.x - 在同一个元素上同时使用，v-for会优先作用\nvue3.x - v-if 总是优先与 v-for")]),t._v(" "),e("p",[t._v("面试: key的作用")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("模板编译原理 —— template\n=> 正则匹配语法 - AST：静态 + 动态 => 转换AST为可执行方法 => render() => dom")])]),t._v(" "),e("li",[e("p",[t._v("dom diff\n1 2 3 4 5 6")])])]),t._v(" "),e("p",[t._v("6 5 4 7 2 1\n层级：只考虑单层复用，多层级遍历实现\n顺序：双向指针，首尾向中间移动\n替换：移动、新增、删除；优先复用 - key => 快速识别顺序")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("key作用 —— 尽可能复用节点\n=> index做key、随机数做key")])]),t._v(" "),e("h3",{attrs:{id:"版本差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本差异"}},[t._v("#")]),t._v(" 版本差异")]),t._v(" "),e("ol",[e("li",[t._v("数据上")])]),t._v(" "),e("ul",[e("li",[t._v("面试题 => 对象的响应式是否会传递影响\n2.x：对象的响应式是可以传递的，新建本地变量可以传递响应\n3：响应式对象始终通过挂载实例（即this）获取")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("模板上\n2.x：统一根模板\n3: 支持碎片化模板")])]),t._v(" "),e("li",[e("p",[t._v("方法上\n2.x 收敛到methods中做方法函数集合\n3 平铺方法，以钩子形式展示")])])]),t._v(" "),e("p",[t._v("=> 尝试升级下我们的2.0")])])}),[],!1,null,null,null);a.default=v.exports}}]);