(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{618:function(t,e,a){"use strict";a.r(e);var o=a(6),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#函数式组件"}},[t._v("函数式组件")])]),a("li",[a("a",{attrs:{href:"#react-hooks-钩子"}},[t._v("React hooks(钩子)")])]),a("li",[a("a",{attrs:{href:"#常用-hook"}},[t._v("常用 hook")])]),a("li",[a("a",{attrs:{href:"#memo"}},[t._v("Memo")])])])]),a("p"),t._v(" "),a("h3",{attrs:{id:"函数式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件"}},[t._v("#")]),t._v(" 函数式组件")]),t._v(" "),a("ul",[a("li",[t._v("函数式组件，本质就是一个常规函数，接收一个参数 props 并返回一个 reactNodes")]),t._v(" "),a("li",[t._v("函数式组件中没有this和生命周期函数,不能使用 string ref")]),t._v(" "),a("li",[t._v("使用函数式组件时，应该尽量减少在函数中声明子函数，否则，组件每次更新时都会重新创建这个函数")])]),t._v(" "),a("h3",{attrs:{id:"react-hooks-钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-hooks-钩子"}},[t._v("#")]),t._v(" React hooks(钩子)")]),t._v(" "),a("p",[t._v("React hooks 是React 16.8中的新增功能。它们使您无需编写类即可使用状态和其他React功能")]),t._v(" "),a("h3",{attrs:{id:"常用-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-hook"}},[t._v("#")]),t._v(" 常用 hook")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("useState"),a("br"),t._v(" "),a("code",[t._v("const [state, setState] = useState(initialState);")]),t._v("\nconst [状态,修改该状态的方法] = useState(初始值);\n1. 在同一个组件中可以使用 useState 定义多个状态\n2. 注意 useState 返回的 setState 方法，不会进行对象合并\n3. 注意 useState 返回的 setState 方法同样是异步方法")])]),t._v(" "),a("li",[a("p",[t._v("useEffect\n类组件\ncomponentDidMount、componentDidUpdate 和 componentWillUnmount\n需要清除的副作用")])]),t._v(" "),a("li",[a("p",[t._v("useRef\n用户关联原生DOM节点，或者用来记录组件更新前的一些数据")])]),t._v(" "),a("li",[a("p",[t._v("useMemo\nconst data = useMemo(cb,[]);")])]),t._v(" "),a("li",[a("p",[t._v("useCallback")])])]),t._v(" "),a("h3",{attrs:{id:"memo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memo"}},[t._v("#")]),t._v(" Memo")]),t._v(" "),a("p",[t._v("React.memo(Component, [areEqual(prevProps, nextProps)]);")]),t._v(" "),a("h4",{attrs:{id:"hook-使用规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook-使用规则"}},[t._v("#")]),t._v(" Hook 使用规则")]),t._v(" "),a("ul",[a("li",[t._v("只在 React 函数中调用 Hook\n"),a("ul",[a("li",[t._v("React 函数组件中")]),t._v(" "),a("li",[t._v("React 自定义 Hook 中")])])]),t._v(" "),a("li",[t._v("只在最顶层使用 Hook")])])])}),[],!1,null,null,null);e.default=s.exports}}]);