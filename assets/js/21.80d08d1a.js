(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{532:function(t,a,e){t.exports=e.p+"assets/img/tcp3.d5b6675e.png"},606:function(t,a,e){"use strict";e.r(a);var s=e(6),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#说一下-http-和-https"}},[t._v("说一下 http 和 https")]),s("ul",[s("li",[s("a",{attrs:{href:"#https-的-ssl-加密是在传输层实现的。"}},[t._v("https 的 SSL 加密是在传输层实现的。")])]),s("li",[s("a",{attrs:{href:"#_1-http-和-https-的基本概念"}},[t._v("(1)http 和 https 的基本概念")])]),s("li",[s("a",{attrs:{href:"#_2-http-和-https-的区别"}},[t._v("(2)http 和 https 的区别?")])]),s("li",[s("a",{attrs:{href:"#_3-https-协议的工作原理"}},[t._v("(3)https 协议的工作原理")])]),s("li",[s("a",{attrs:{href:"#_4-https-协议的优点"}},[t._v("(4)https 协议的优点")])]),s("li",[s("a",{attrs:{href:"#_5-https-协议的缺点"}},[t._v("(5)https 协议的缺点")])])])]),s("li",[s("a",{attrs:{href:"#tcp-三次握手-一句话概括"}},[t._v("tcp 三次握手，一句话概括")]),s("ul",[s("li",[s("a",{attrs:{href:"#参考回答"}},[t._v("参考回答")])])])]),s("li",[s("a",{attrs:{href:"#tcp-和-udp-的区别"}},[t._v("TCP 和 UDP 的区别")]),s("ul",[s("li",[s("a",{attrs:{href:"#参考回答"}},[t._v("参考回答")])])])]),s("li",[s("a",{attrs:{href:"#websocket-的实现和应用"}},[t._v("WebSocket 的实现和应用")]),s("ul",[s("li",[s("a",{attrs:{href:"#参考回答"}},[t._v("参考回答")])])])]),s("li",[s("a",{attrs:{href:"#http-请求的方式-head-方式"}},[t._v("HTTP 请求的方式，HEAD 方式")]),s("ul",[s("li",[s("a",{attrs:{href:"#参考回答"}},[t._v("参考回答")])])])]),s("li",[s("a",{attrs:{href:"#一个图片-url-访问后直接下载怎样实现"}},[t._v("一个图片 url 访问后直接下载怎样实现?")]),s("ul",[s("li",[s("a",{attrs:{href:"#参考回答"}},[t._v("参考回答")])])])]),s("li",[s("a",{attrs:{href:"#说一下-web-quality-无障碍"}},[t._v("说一下 web Quality(无障碍)")]),s("ul",[s("li",[s("a",{attrs:{href:"#参考回答"}},[t._v("参考回答")])])])]),s("li",[s("a",{attrs:{href:"#几个很实用的-bom-属性对象方法"}},[t._v("几个很实用的 BOM 属性对象方法?")]),s("ul",[s("li",[s("a",{attrs:{href:"#参考回答"}},[t._v("参考回答")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"说一下-http-和-https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下-http-和-https"}},[t._v("#")]),t._v(" 说一下 http 和 https")]),t._v(" "),s("h3",{attrs:{id:"https-的-ssl-加密是在传输层实现的。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-的-ssl-加密是在传输层实现的。"}},[t._v("#")]),t._v(" https 的 SSL 加密是在传输层实现的。")]),t._v(" "),s("h3",{attrs:{id:"_1-http-和-https-的基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-和-https-的基本概念"}},[t._v("#")]),t._v(" (1)http 和 https 的基本概念")]),t._v(" "),s("p",[t._v("http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和 服务器端请求和应答的标准(TCP)，用于从 WWW 服务器传输超文本到本地浏览器的传 输协议，它可以使浏览器更加高效，使网络传输减少。\nhttps: 是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版，即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。\nhttps 协议的主要作用是:建立一个信息安全通道，来确保数组的传输，确保网站的真 实性。")]),t._v(" "),s("h3",{attrs:{id:"_2-http-和-https-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-和-https-的区别"}},[t._v("#")]),t._v(" (2)http 和 https 的区别?")]),t._v(" "),s("p",[t._v("http 传输的数据都是未加密的，也就是明文的，网景公司设置了 SSL 协议来对 http 协 议传输的数据进行加密处理，简单来说 https 协议是由 http 和 ssl 协议构建的可进行 加密传输和身份认证的网络协议，比 http 协议的安全性更高。\n主要的区别如下:\nHttps 协议需要 ca 证书，费用较高。\nhttp 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协 议。\n使用不同的链接方式，端口也不同，一般而言，http 协议的端口为 80，https 的端口 为 443\nhttp 的连接很简单，是无状态的;HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传 输、身份认证的网络协议，比 http 协议安全。")]),t._v(" "),s("h3",{attrs:{id:"_3-https-协议的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-https-协议的工作原理"}},[t._v("#")]),t._v(" (3)https 协议的工作原理")]),t._v(" "),s("p",[t._v("客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤，如图所示。\n客户使用 https url 访问服务器，则要求 web 服务器建立 ssl 链接。\nweb 服务器接收到客户端的请求之后，会将网站的证书(证书中包含了公钥)，返回或 者说传输给客户端。\n客户端和 web 服务器端开始协商 SSL 链接的安全等级，也就是加密等级。 客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来 加密会话密钥，并传送给网站。\nweb 服务器通过自己的私钥解密出会话密钥。\nweb 服务器通过会话密钥加密与客户端之间的通信。")]),t._v(" "),s("h3",{attrs:{id:"_4-https-协议的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-https-协议的优点"}},[t._v("#")]),t._v(" (4)https 协议的优点")]),t._v(" "),s("p",[t._v("使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器;\nHTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。\nHTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻 击的成本。\n谷歌曾在 2014 年 8 月份调整搜索引擎算法，并称“比起同等 HTTP 网站，采用 HTTPS 加密的网站在搜索结果中的排名将会更高”。")]),t._v(" "),s("h3",{attrs:{id:"_5-https-协议的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-https-协议的缺点"}},[t._v("#")]),t._v(" (5)https 协议的缺点")]),t._v(" "),s("p",[t._v("https 握手阶段比较费时，会使页面加载时间延长 50%，增加 10%~20%的耗电。\nhttps 缓存不如 http 高效，会增加数据开销。\nSSL 证书也需要钱，功能越强大的证书费用越高。\nSSL 证书需要绑定 IP，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。")]),t._v(" "),s("h2",{attrs:{id:"tcp-三次握手-一句话概括"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手-一句话概括"}},[t._v("#")]),t._v(" tcp 三次握手，一句话概括")]),t._v(" "),s("h3",{attrs:{id:"参考回答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("p",[t._v("客户端和服务端都需要直到各自可收发，因此需要三次握手。简化三次握手:\n"),s("img",{attrs:{src:e(532),alt:"alt tcp03"}})]),t._v(" "),s("p",[t._v("从图片可以得到三次握手可以简化为:\nC 发起请求连接 S 确认，也发起连接 C 确认我们\n再看看每次握手的作用:\n第一次握手:S 只可以确认 自己可以接受 C 发送的报文段第\n二次握手:C 可以确认 S 收到了自己发送的报文段，并且可以确认 自己可以接受 S 发 送的报文段\n第三次握手:S 可以确认 C 收到了自己发送的报文段")]),t._v(" "),s("h2",{attrs:{id:"tcp-和-udp-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别"}},[t._v("#")]),t._v(" TCP 和 UDP 的区别")]),t._v(" "),s("h3",{attrs:{id:"参考回答-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答-2"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("p",[t._v("(1)TCP 是面向连接的，udp 是无连接的即发送数据前不需要先建立链接。\n(2)TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失， 不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付。 并且因为 tcp 可靠， 面向连接，不会丢失数据因此适合大数据量的交换。\n(3)TCP 是面向字节流，UDP 面向报文，并且网络出现拥塞不会使得发送速率降低 (因此会出现丢包，对实时的应用比如 IP 电话和视频会议等)。\n(4)TCP只能是1对1的，UDP支持1对1,1对多。\n(5)TCP 的首部较大为 20 字节，而 UDP 只有 8 字节。\n(6)TCP 是面向连接的可靠性传输，而 UDP 是不可靠的。")]),t._v(" "),s("h2",{attrs:{id:"websocket-的实现和应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-的实现和应用"}},[t._v("#")]),t._v(" WebSocket 的实现和应用")]),t._v(" "),s("h3",{attrs:{id:"参考回答-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答-3"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("p",[t._v("(1)什么是 WebSocket?"),s("br"),t._v("\nWebSocket 是 HTML5 中的协议，支持持久连续，http 协议不支持持久性连接。Http1.0 和 HTTP1.1 都不支持持久性的链接，HTTP1.1 中的 keep-alive，将多个 http 请求合并 为1个"),s("br"),t._v("\n(2)WebSocket 是什么样的协议，具体有什么优点?"),s("br"),t._v("\nHTTP 的生命周期通过 Request 来界定，也就是 Request 一个 Response，那么在 Http1.0 协议中，这次 Http 请求就结束了。在 Http1.1 中进行了改进，是的有一个 connection:Keep-alive，也就是说，在一个 Http 连接中，可以发送多个 Request， 接收多个 Response。但是必须记住，在 Http 中一个 Request 只能对应有一个 Response，而且这个 Response 是被动的，不能主动发起。"),s("br"),t._v("\nWebSocket 是基于 Http 协议的，或者说借用了 Http 协议来完成一部分握手，在握手阶 段与 Http 是相同的。我们来看一个 websocket 握手协议的实现，基本是 2 个属性， upgrade，connection。"),s("br"),t._v("\n基本请求如下:"),s("br"),t._v("\nGET /chat HTTP/1.1"),s("br"),t._v("\nHost: server.example.com"),s("br"),t._v("\nUpgrade: websocket"),s("br"),t._v("\nConnection: Upgrade"),s("br"),t._v("\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw=="),s("br"),t._v("\nSec-WebSocket-Protocol: chat, superchat"),s("br"),t._v("\nSec-WebSocket-Version: 13"),s("br"),t._v("\nOrigin: http://example.com"),s("br"),t._v("\n多了下面 2 个属性:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("编号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Upgrade:webSocket")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Connection:Upgrade")])])])]),t._v(" "),s("p",[t._v("告诉服务器发送的是 websocket")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("编号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Sec-WebSocket-Protocol: chat, superchat")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Sec-WebSocket-Version: 13")])])])]),t._v(" "),s("h2",{attrs:{id:"http-请求的方式-head-方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-请求的方式-head-方式"}},[t._v("#")]),t._v(" HTTP 请求的方式，HEAD 方式")]),t._v(" "),s("h3",{attrs:{id:"参考回答-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答-4"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("p",[t._v("head:类似于 get 请求，只不过返回的响应中没有具体的内容，用户获取报头\noptions:允许客户端查看服务器的性能，比如说服务器支持的请求方式等等。")]),t._v(" "),s("h2",{attrs:{id:"一个图片-url-访问后直接下载怎样实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个图片-url-访问后直接下载怎样实现"}},[t._v("#")]),t._v(" 一个图片 url 访问后直接下载怎样实现?")]),t._v(" "),s("h3",{attrs:{id:"参考回答-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答-5"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("p",[t._v("请求的返回头里面，用于浏览器解析的重要参数就是 OSS 的 API 文档里面的返回 http 头，决定用户下载行为的参数。\n下载的情况下:")]),t._v(" "),s("ol",[s("li",[t._v("x-oss-object-type: Normal")]),t._v(" "),s("li",[t._v("x-oss-request-id: 598D5ED34F29D01FE2925F41")]),t._v(" "),s("li",[t._v("x-oss-storage-class: Standard")])]),t._v(" "),s("h2",{attrs:{id:"说一下-web-quality-无障碍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下-web-quality-无障碍"}},[t._v("#")]),t._v(" 说一下 web Quality(无障碍)")]),t._v(" "),s("h3",{attrs:{id:"参考回答-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答-6"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("p",[t._v("能够被残障人士使用的网站才能称得上一个易用的(易访问的)网站。 残障人士指的是那些带有残疾或者身体不健康的用户。\n使用 alt 属性:\n"),s("img",{attrs:{src:"person.jpg",alt:"this is a person"}}),t._v(" 有时候浏览器会无法显示图像。具体的原因有: 用户关闭了图像显示\n浏览器是不支持图形显示的迷你浏览器 浏览器是语音浏览器(供盲人和弱视人群使用)\n如果您使用了 alt 属性，那么浏览器至少可以显示或读出有关图像的描述。")]),t._v(" "),s("h2",{attrs:{id:"几个很实用的-bom-属性对象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几个很实用的-bom-属性对象方法"}},[t._v("#")]),t._v(" 几个很实用的 BOM 属性对象方法?")]),t._v(" "),s("h3",{attrs:{id:"参考回答-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答-7"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("p",[t._v("什么是 Bom? Bom 是浏览器对象。有哪些常用的 Bom 属性呢?"),s("br"),t._v("\n(1)location 对象"),s("br"),t._v("\nlocation.href-- 返回或设置当前文档的 URL location.search -- 返回 URL 中的查询字符串部分。例如 http://www.dreamdu.com/dreamdu.php?id=5&name=dreamdu 返回包括(?)后面的 内容?id=5&name=dreamdu"),s("br"),t._v("\nlocation.hash -- 返回 URL#后面的内容，如果没有#，返回空"),s("br"),t._v("\nlocation.host -- 返回URL中的域名部分，例如www.dreamdu.com location.hostname -- 返回 URL 中的主域名部分，例如 dreamdu.com location.pathname -- 返回 URL 的域名后的部分。\n例如 http://www.dreamdu.com/xhtml/ 返回/xhtml/ location.port -- 返回 URL 中的端口部分。"),s("br"),t._v("\n例如 http://www.dreamdu.com:8080/xhtml/ 返回8080")]),t._v(" "),s("p",[t._v("location.protocol -- 返回 URL 中的协议部分。\n例如 http://www.dreamdu.com:8080/xhtml/ 返回(//)前面的内容http: location.assign -- 设置当前文档的 URL"),s("br"),t._v("\nlocation.replace() -- 设置当前文档的 URL，并且在 history 对象的地址列表中移除 这个 URL location.replace(url);"),s("br"),t._v("\nlocation.reload() -- 重载当前页面"),s("br"),t._v("\n(2)history 对象"),s("br"),t._v("\nhistory.go() -- 前进或后退指定的页面数 history.go(num);"),s("br"),t._v("\nhistory.back() -- 后退一页"),s("br"),t._v("\nhistory.forward() -- 前进一页"),s("br"),t._v("\n(3)Navigator 对象"),s("br"),t._v("\nnavigator.userAgent -- 返回用户代理头的字符串表示(就是包括浏览器版本信息等 的字符串)"),s("br"),t._v("\nnavigator.cookieEnabled -- 返回浏览器是否支持(启用)cookie")])])}),[],!1,null,null,null);a.default=r.exports}}]);